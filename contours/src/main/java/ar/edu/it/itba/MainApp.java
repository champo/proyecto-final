/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.edu.it.itba;

import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import ar.edu.it.itba.metrics.HeatMap;
import ar.edu.it.itba.processing.ActiveContour;
import ar.edu.it.itba.processing.Contour;
import ar.edu.it.itba.processing.Homography;
import ar.edu.it.itba.processing.color.ColorPoint;
import ar.edu.it.itba.video.BlackOutOutskirts;
import ar.edu.it.itba.video.FrameDecoder;
import ar.edu.it.itba.video.FrameProvider;
import ar.edu.it.itba.video.LensCorrection;

/**
 *
 * @author eordano
 */
public class MainApp extends javax.swing.JFrame {

	private static final long serialVersionUID = 5474244925067694842L;

	private Point currentImagePoint;
    private Point currentMappedPoint;

    /**
     * Creates new form MainApp
     */
    public MainApp() {
        initComponents();
    }

    public static Color phiColoring[] = new Color[] {
        new Color(0,0,0),
        new Color(255, 0, 0),
        new Color(255, 0, 255),
        new Color(0, 255, 0),
        new Color(0, 255, 255),
        new Color(255, 255, 255),
        new Color(128, 128, 128)
    };
    private ImagePanel imagePanel;
    private ImagePanel soccerFieldPanel;
    private FrameProvider frameDecoder;

    private File outFile;
    private OutputStream outBuffer;
    private BufferedImage firstFrame;
    private ActiveContour ac;

    private final List<Contour> contour = new ArrayList<Contour>();

    private MouseListener mouseListener;
    private HomeographyManager homeographyManager;
    private int selected = 1;
    int framesElapsed = 0;
    
    // Multithread automatic playing
	private boolean playing;
	private Thread playThread;
	private CountDownLatch busyLock;

    private boolean selectingFirst = true;
    private boolean selectingPoint = false;
    private Button startTrackingButton;
	protected Homography homeography;
	protected boolean mappingPoint;
	private BufferedImage frame;
	protected boolean selectRectangle = true;
	private Button shapeButton;
	private Button typeButton;
	protected ColorPoint.Type type = ColorPoint.Type.RGB;

	protected HeatMap heatMap;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "rawtypes", "serial" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homeographyMappingPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pointsList = new javax.swing.JList();
        newPointButton = new javax.swing.JButton();
        deletePointButton = new javax.swing.JButton();
        calculateButton = new javax.swing.JButton();
        mapButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        soccerFieldContainer = new javax.swing.JPanel();
        videoControlPanel = new javax.swing.JPanel();
        phiImagePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        imageContainerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Puntos identificados en la cancha");

        pointsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            @Override
			public int getSize() { return strings.length; }
            @Override
			public Object getElementAt(final int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(pointsList);

        newPointButton.setText("New");
        newPointButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
                newPointButtonActionPerformed(evt);
            }
        });

        deletePointButton.setText("Delete");
        deletePointButton.setEnabled(false);
        deletePointButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
                deletePointButtonActionPerformed(evt);
            }
        });

        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        mapButton.setText("Map point");
        mapButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(final java.awt.event.ActionEvent evt) {
                mapButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setMaximumSize(new java.awt.Dimension(403, 551));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(403, 551));

        org.jdesktop.layout.GroupLayout soccerFieldContainerLayout = new org.jdesktop.layout.GroupLayout(soccerFieldContainer);
        soccerFieldContainer.setLayout(soccerFieldContainerLayout);
        soccerFieldContainerLayout.setHorizontalGroup(
            soccerFieldContainerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 403, Short.MAX_VALUE)
        );
        soccerFieldContainerLayout.setVerticalGroup(
            soccerFieldContainerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 642, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(soccerFieldContainer);

        org.jdesktop.layout.GroupLayout homeographyMappingPanelLayout = new org.jdesktop.layout.GroupLayout(homeographyMappingPanel);
        homeographyMappingPanel.setLayout(homeographyMappingPanelLayout);
        homeographyMappingPanelLayout.setHorizontalGroup(
            homeographyMappingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(homeographyMappingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(homeographyMappingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(homeographyMappingPanelLayout.createSequentialGroup()
                        .add(homeographyMappingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, homeographyMappingPanelLayout.createSequentialGroup()
                                .add(newPointButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(deletePointButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(calculateButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mapButton)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
                .addContainerGap())
        );
        homeographyMappingPanelLayout.setVerticalGroup(
            homeographyMappingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(homeographyMappingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 163, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(homeographyMappingPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(newPointButton)
                    .add(deletePointButton)
                    .add(calculateButton)
                    .add(mapButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout videoControlPanelLayout = new org.jdesktop.layout.GroupLayout(videoControlPanel);
        videoControlPanel.setLayout(videoControlPanelLayout);
        videoControlPanelLayout.setHorizontalGroup(
            videoControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        videoControlPanelLayout.setVerticalGroup(
            videoControlPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout phiImagePanelLayout = new org.jdesktop.layout.GroupLayout(phiImagePanel);
        phiImagePanel.setLayout(phiImagePanelLayout);
        phiImagePanelLayout.setHorizontalGroup(
            phiImagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 840, Short.MAX_VALUE)
        );
        phiImagePanelLayout.setVerticalGroup(
            phiImagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 444, Short.MAX_VALUE)
        );

        imageContainerPanel.setMaximumSize(new java.awt.Dimension(836, 498));

        org.jdesktop.layout.GroupLayout imageContainerPanelLayout = new org.jdesktop.layout.GroupLayout(imageContainerPanel);
        imageContainerPanel.setLayout(imageContainerPanelLayout);
        imageContainerPanelLayout.setHorizontalGroup(
            imageContainerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 980, Short.MAX_VALUE)
        );
        imageContainerPanelLayout.setVerticalGroup(
            imageContainerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 513, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(imageContainerPanel);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(phiImagePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 984, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(videoControlPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(homeographyMappingPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(homeographyMappingPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(videoControlPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                        .add(phiImagePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deletePointButtonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePointButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deletePointButtonActionPerformed

    private void newPointButtonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPointButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newPointButtonActionPerformed

    private void calculateButtonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        homeography = homeographyManager.calculateHomography();
//        homeography = homeographyManager.calculateIterativeHomegraphy(1);
        mapButton.setEnabled(homeography != null);
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void mapButtonActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapButtonActionPerformed
        mappingPoint = true;
    }//GEN-LAST:event_mapButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new MainApp().run();
                } catch (IOException ex) {
                    Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void appendHomeographyPair(final Point imagePoint, final Point mappedPoint) {
        homeographyManager.setMapping(imagePoint, mappedPoint);
    }
    private void checkPair() {
        if (this.currentMappedPoint != null && this.currentImagePoint != null) {
            appendHomeographyPair(this.currentImagePoint, this.currentMappedPoint);
            this.currentImagePoint = null;
            this.currentMappedPoint = null;
            selectingPoint = false;
            pointsList.updateUI();
        }
    }
    private void setCurrentSelectedImagePoint(final Point point) {
        this.currentImagePoint = point;
        checkPair();
    }
    private void setCurrentSelectedMappedPoint(final Point point) {
        this.currentMappedPoint = point;
        checkPair();
    }

	private MainApp run() throws IOException {
        homeographyManager = new HomeographyManager();

        //frameDecoder = new BackgroundDetection(new FrameDecoder("/Users/jpcivile/Desktop/Boca1.mp4"), 60);
        //frameDecoder = new BackgroundDetection(new FrameDecoder("/home/acrespo/Dropbox/ati-2013/Independiente2b.mp4"), 60);
        frameDecoder = new FrameDecoder("/Users/eordano/Desktop/A1.mp4");
        //frameDecoder = new FrameDecoder("/Users/eordano/Downloads/Boca1.mp4");
        // frameDecoder = new LensCorrection(new FrameDecoder("/Users/jpcivile/Desktop/Boca1.mp4"), 1.6175);
		/*List<Point> points = new LinkedList<Point>();
		points.add(new Point(425, 40));
		points.add(new Point(54, 321));
		points.add(new Point(1518, 345));
		points.add(new Point(1147, 52));
		List<Point> firstPoints = new LinkedList<Point>();
		firstPoints.add(new Point(200, 375));
		firstPoints.add(new Point(200, 750));
		firstPoints.add(new Point(1750, 750));
		firstPoints.add(new Point(1750, 375));
		homeographyManager.setMapping(new Point(370, -2), new Point(16, 5));
		homeographyManager.setMapping(new Point(-2, 285), new Point(16, 282));
		homeographyManager.setMapping(new Point(1460, 305), new Point(441, 282));
		homeographyManager.setMapping(new Point(1091, 13), new Point(441,5));
		frameDecoder = // new BackgroundDetection(
			new BlackOutOutskirts(
	    		new LensCorrection(
	        		new BlackOutOutskirts(
	                       // new FrameDecoder("/Users/eordano/Desktop/new.mkv")
	                       new FrameDecoder("/Users/eordano/Downloads/Boca1.mp4")
	               , firstPoints)
	    		, 1.91)
	    	, points)
		//, 40)
		;/*
        /*frameDecoder = // new BackgroundDetection(
				// new BlackOutOutskirts(
			    		// new LensCorrection(
			        		// new BlackOutOutskirts(
                new FrameDecoder("/Users/eordano/Downloads/Boca1.mp4")
			               // , firstPoints)
			    		// , 1.91)
			    	// , points)
				//, 40)
		;*/
        /* frameDecoder = // new BackgroundDetection(
    			new BlackOutOutskirts(
	        		new LensCorrection(
	            		new BlackOutOutskirts(
                               new FrameDecoder("/Users/eordano/Downloads/Boca1.mp4")
                       , firstPoints)
	        		, 1.91)
	        	, points)
    		//, 40)
        ;
        */
        /* Con Background Detection + Blackout
        frameDecoder = new BackgroundDetection(
    			new BlackOutOutskirts(
	        		new LensCorrection(
	        			new FrameDecoder("/Users/jpcivile/Desktop/Boca1.mp4"),
	        		2.35),
	        	points),
    		60)
        ;*/
        imagePanel = new ImagePanel();
        frameDecoder.nextFrame();
        BufferedImage frame = buildImage();
        imagePanel.setSize(frame.getWidth(), frame.getHeight());
        imageContainerPanel.add(imagePanel, CENTER_ALIGNMENT);
        String outFilename = Long.toString(new Date().getTime()) + "-points.txt";
        outFile = new File(outFilename);
        outFile.createNewFile();
        outBuffer = new FileOutputStream(outFile);

        mouseListener = new MouseListener() {

            @Override
            public void mouseReleased(final MouseEvent arg0) {
            }

            @Override
            public void mousePressed(final MouseEvent arg0) {
            }

            @Override
            public void mouseExited(final MouseEvent arg0) {
            }

            @Override
            public void mouseEntered(final MouseEvent arg0) {
            }

            @Override
            public void mouseClicked(final MouseEvent arg0) {
            	if (mappingPoint) {
            		if (homeography != null) {
            			Point mapped = homeography.apply(arg0.getPoint());
            			BufferedImage image = soccerFieldPanel.getImage();

            			if (mapped.x < 0 || mapped.x >= image.getWidth() - 1 || mapped.y < 0 || mapped.y >= image.getHeight()) {
            				System.out.println("Skipping point out of bounds");
            				return;
            			}

            			image.setRGB(mapped.x, mapped.y, Color.red.getRGB());

            			soccerFieldPanel.setImage(image);
            		}
            		mappingPoint = false;
            	} else if (selectingPoint) {
                    setCurrentSelectedImagePoint(arg0.getPoint());
                } else if (selectingFirst) {
                    Contour c;

                    if (selectRectangle) {
                    	c = Contour.aroundPoint(selected++, arg0.getPoint());
                    } else {
                    	c = Contour.squareAroundPoint(selected++, arg0.getPoint());
                    }
                    c.setType(type);
                    // c.printValues(imagePanel.getImage());

					contour.add(c);
                    BufferedImage image = imagePanel.getImage();
                    ImageOperations.drawContourOnBuffer(image, contour.get(contour.size() - 1));
                    imagePanel.setImage(image);
                } else {
                    Contour c;

                    if (selectRectangle) {
                    	c = Contour.aroundPoint(selected++, arg0.getPoint());
                    } else {
                    	c = Contour.squareAroundPoint(selected++, arg0.getPoint());
                    }
                    c.setType(type);

					contour.add(c);
                    BufferedImage image = imagePanel.getImage();
                    ImageOperations.drawContourOnBuffer(image, contour.get(contour.size() - 1));
                    imagePanel.setImage(image);
                    if (ac != null) {
                        ac = new ActiveContour(image, contour.toArray(new Contour[contour.size()]));
                    }
                }
            }

        };

        shapeButton = new Button("Rectangle");
        shapeButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
            	selectRectangle = !selectRectangle;

            	if (selectRectangle) {
            		shapeButton.setLabel("Rectangle");
            	} else {
            		shapeButton.setLabel("Square");
            	}
            }
        });

        phiImagePanel.setLayout(new GridLayout(1, 2));
        phiImagePanel.add(shapeButton, LEFT_ALIGNMENT);

        typeButton = new Button("Type = RGB");
        typeButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
            	switch (type) {
				case HS:
					type = ColorPoint.Type.RGB;
					typeButton.setLabel("Type = RGB");
					break;
				case HSI:
					type = ColorPoint.Type.HS;
					typeButton.setLabel("Type = HS");
					break;
				case RGB:
					type = ColorPoint.Type.HSI;
					typeButton.setLabel("Type = HSI");
					break;
				default:
					break;
            	}
            }
        });

        phiImagePanel.add(typeButton, RIGHT_ALIGNMENT);

        imagePanel.addMouseListener(mouseListener);
        startTrackingButton = new Button("Start tracking");
        startTrackingButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
                selectingFirst = false;
                videoControlPanel.remove(startTrackingButton);
                startTrackingButton = null;

                ac = new ActiveContour(firstFrame, contour.toArray(new Contour[contour.size()]));
                homeography = homeographyManager.calculateHomography();
                heatMap = new HeatMap(soccerFieldPanel.getImage());
//                homeography = homeographyManager.calculateIterativeHomegraphy(1);
                addNextFrameButton();

            }
        });
        videoControlPanel.setLayout(new GridLayout(1, 1));
        videoControlPanel.add(startTrackingButton);

        soccerFieldPanel = new ImagePanel();
        soccerFieldContainer.add(soccerFieldPanel, CENTER_ALIGNMENT);

        BufferedImage soccerField = ImageIO.read(new File("src/main/resources/independiente.png"));
        soccerFieldPanel.setImage(soccerField);
        soccerFieldPanel.setSize(new Dimension(soccerField.getWidth(), soccerField.getHeight()));
        soccerFieldPanel.addMouseMotionListener(new MouseMotionListener() {

			@Override
			public void mouseMoved(final MouseEvent arg0) {
				if (homeography != null) {
					Point inverseApply = homeography.inverseApply(arg0.getX(), arg0.getY());
					if (inverseApply.x > 0 && inverseApply.x < getFrame().getWidth() &&
						inverseApply.y > 0 && inverseApply.y < getFrame().getHeight()) {
						getFrame().setRGB(inverseApply.x, inverseApply.y, Color.magenta.getRGB());
						imagePanel.setImage(getFrame());
					}
				}
			}

			@Override
			public void mouseDragged(final MouseEvent arg0) {
			}
		});
        soccerFieldPanel.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(final MouseEvent e) {
                if (selectingPoint) {
                    setCurrentSelectedMappedPoint(e.getPoint());
                }
            }

            @Override
            public void mousePressed(final MouseEvent e) {
            }

            @Override
            public void mouseReleased(final MouseEvent e) {
            }

            @Override
            public void mouseEntered(final MouseEvent e) {
            }

            @Override
            public void mouseExited(final MouseEvent e) {
            }

        });

        newPointButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent e) {
                selectingPoint = true;
            }
        });
        deletePointButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent e) {
                homeographyManager.removeItem(pointsList.getSelectedIndex());
                pointsList.updateUI();
                deletePointButton.setEnabled(false);
            }
        });
        pointsList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(final ListSelectionEvent e) {
                deletePointButton.setEnabled(true);
            }
        });

        pack();
        setVisible(true);

        Dimension oldSize = imageContainerPanel.getPreferredSize();

        // Skip first three frames cause it jumps to much
        frameDecoder.nextFrame();
        BufferedImage firstImage = buildImage();
        Dimension frameSize = new Dimension(firstImage.getWidth(), firstImage.getHeight());
        imagePanel.setPreferredSize(frameSize);
        imageContainerPanel.setPreferredSize(frameSize);

        jScrollPane2.setPreferredSize(oldSize);
        jScrollPane2.setMaximumSize(oldSize);
        imageContainerPanel.revalidate();

        // for (int i = 0; i < 8; i++) {
        //	frameDecoder.nextFrame();
        // }
        frameDecoder.nextFrame();

        pointsList.setModel(homeographyManager.getListModel());


        Dimension oldSoccerSize = soccerFieldContainer.getPreferredSize();
        oldSoccerSize.height = soccerField.getHeight();
        soccerFieldPanel.setPreferredSize(new Dimension(soccerField.getWidth(), soccerField.getHeight()));
        soccerFieldContainer.setPreferredSize(new Dimension(soccerField.getWidth(), soccerField.getHeight()));
        jScrollPane3.setPreferredSize(oldSoccerSize);
        jScrollPane3.setMaximumSize(oldSoccerSize);

        loadNextFrame();
        return this;
    }

    private BufferedImage buildImage() {
    	BufferedImage image = new BufferedImage(frameDecoder.getWidth(), frameDecoder.getHeight(), frameDecoder.getType());
    	for (int i = 0; i < frameDecoder.getWidth(); i++) {
    		for (int j = 0; j < frameDecoder.getHeight(); j++) {
    			image.setRGB(i, j, frameDecoder.getRGB(i,  j));
    		}
    	}
		return image;
	}

	protected BufferedImage getFrame() {
    	return frame;
	}

	private void addNextFrameButton() {
        Button button = new Button("Next frame");
        button.setSize(new Dimension(100, 10));
        button.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
                loadNextFrame();
            }
        });
        videoControlPanel.setLayout(new GridLayout(2, 1));
        videoControlPanel.add(button);

			final Button button2 = new Button("Play");
			button2.setSize(new Dimension(100, 10));
			final Runnable runnable = new Runnable() {
			@Override
			public void run() {
				try {
					while (true) {
						busyLock = loadNextFrame();
						waitForBusyLock();
						repaint();
					}
				} catch (InterruptedException e) {
					return;
				}
			}
		};
		final ActionListener actionListener = new ActionListener() {

			@Override
			public void actionPerformed(final ActionEvent arg0) {
				if (!playing) {
					playThread = new Thread(runnable);
					playThread.start();
					playing = true;
					button2.setLabel("Pause");
				} else {
					if (playThread != null) {
						playThread.interrupt();
						playing = false;
						button2.setLabel("Play");
					}
				}
			}
		};
		button2.addActionListener(actionListener);
		videoControlPanel.add(button2);

        pack();
        repaint();
    }

	private void waitForBusyLock() throws InterruptedException {
		busyLock.await();
	}

    private CountDownLatch loadNextFrame() {

    	final CountDownLatch busyLock = new CountDownLatch(1);
        new Thread(new Runnable() {
            @Override
            public void run() {
            	long time = System.currentTimeMillis();
            	frameDecoder.nextFrame();
                frame = MainApp.this.buildImage();
                framesElapsed++;
                if (firstFrame == null) {
                	firstFrame = new BufferedImage(frame.getWidth(), frame.getHeight(), frame.getType());

                	for (int i = 0; i < frame.getWidth(); i++) {
                		for (int j = 0; j < frame.getHeight(); j++) {
                			firstFrame.setRGB(i, j, frame.getRGB(i, j));
                		}
                	}
                }

                if (ac != null) {
                	/*
                	BufferedImage phiColor = new BufferedImage(frame.getWidth(), frame.getHeight(), frame.getType());
                	int phiMapping[][] = ac.getMapping();
                	for (int x = 0; x < frame.getWidth(); x++) {
                            for (int y = 0; y < frame.getHeight(); y++) {
                	        phiColor.setRGB(x, y, phiColoring[phiMapping[x][y]].getRGB());
                	    }
                	}
                        phiPanel.setImage(phiColor);
                        phiPanel.repaint();
                	 */
                	ac.adapt(frame);
                	int index = 0;
                	if (homeography != null) {
                		BufferedImage cancha = soccerFieldPanel.getImage();
                		for (int i = 0; i < cancha.getWidth(); i++) {
                			for (int j = 0; j < cancha.getHeight(); j++) {
                				if (cancha.getRGB(i, j) == Color.black.getRGB()) {
            						Point inverseApply = homeography.inverseApply(i, j);
            						if (inverseApply.x > 0 && inverseApply.x < getFrame().getWidth() &&
            							inverseApply.y > 0 && inverseApply.y < getFrame().getHeight()) {
            							// getFrame().setRGB(inverseApply.x, inverseApply.y, Color.magenta.getRGB());
            							// imagePanel.setImage(getFrame());
            						}
                				}
                			}
                		}
                	}
                	for (Contour c : contour) {
                		ImageOperations.drawContourOnBuffer(frame, c);

                		if (homeography != null) {
                			final BufferedImage image = soccerFieldPanel.getImage();

                			Point mapped = homeography.apply(c.centroidX(), c.maxY());
                			if (mapped.x < 0 || mapped.x >= image.getWidth() - 1 || mapped.y < 0 || mapped.y >= image.getHeight()) {
                				System.out.println("Skipping point out of bounds");
                				continue;
                			}
                			try {
								outBuffer.write(String.format("%d, %d, %d, %d\n", framesElapsed, index++, mapped.x, mapped.y).getBytes());
							} catch (IOException e) {
								throw new RuntimeException(e);
							}
//                			image.setRGB(mapped.x, mapped.y, Color.cyan.getRGB());

                			heatMap.addPoint(mapped);

//                			setSoccerFieldImage(image);
                		}
                	}

                	soccerFieldPanel.setImage(heatMap.getFrame());
                	soccerFieldPanel.repaint();

                	setImagePanelImage(frame);
                } else {
                	setImagePanelImage(frame);
                }
                System.out.println("Frame processed in " + (System.currentTimeMillis() - time) + " ms");
                busyLock.countDown();
            }
        }).start();
        return busyLock;
    }


	private void setImagePanelImage(final BufferedImage frame) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				imagePanel.setImage(frame);
                imagePanel.repaint();
			}
		});
	}

	private void setSoccerFieldImage(final BufferedImage image) {
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				soccerFieldPanel.setImage(image);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculateButton;
    private javax.swing.JButton deletePointButton;
    private javax.swing.JPanel homeographyMappingPanel;
    private javax.swing.JPanel imageContainerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton mapButton;
    private javax.swing.JButton newPointButton;
    private javax.swing.JPanel phiImagePanel;
    private javax.swing.JList pointsList;
    private javax.swing.JPanel soccerFieldContainer;
    private javax.swing.JPanel videoControlPanel;
    // End of variables declaration//GEN-END:variables
}
